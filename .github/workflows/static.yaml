# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
#
name: Deploy Angular site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Install Angular CLI and dependencies
        run: |
          npm ci
          npm install -g @angular/cli
      - name: Build Angular project
        run: ng build
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2


## Simple workflow for deploying static content to GitHub Pages
#name: Deploy static content to Pages
#
#on:
#  # Runs on pushes targeting the default branch
#  push:
#    branches: ["main"]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write
#
## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false
#
#jobs:
#  # Single deploy job since we're just deploying
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Setup Pages
#        uses: actions/configure-pages@v3
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v2
#        with:
#          # Upload entire repository
#          path: '.'
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2

# --------------------------------------------------------------------------------

## This is a basic workflow to help you get started with Actions
#
#name: Angular CI
#
## Controls when the workflow will run
#on:
#  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3
#
#      # Set up Node.js (Angular requires Node.js)
#      - name: Set up Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: 20
#
#      # Install dependencies
#      - name: Install Angular CLI and dependencies
#        run: |
#          npm ci
#          npm install -g @angular/cli
#
#      # Build the Angular project
#      - name: Build Angular project
#        run: ng build
#
#
#
#      # Optionally: Run tests (uncomment if you have tests to run)
#      # - name: Run Angular tests
#      #   run: ng test --watch=false
